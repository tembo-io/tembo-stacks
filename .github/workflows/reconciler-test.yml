name: Reconciler test workflow

defaults:
  run:
    shell: bash
    working-directory: ./reconciler/

on:
  pull_request:
    branches:
      - main
    paths:
    - '.github/workflows/reconciler-test.yml'
    - 'reconciler/**'
  # Always run tests on main or release branches
  push:
    branches:
      - main
      - release**

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install minimal nightly with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "reconciler-lint"
          workspaces: |
            reconciler
      - name: Cargo format
        run: cargo +nightly fmt --all --check
      - name: Clippy
        run: cargo clippy
  test:
    name: Run unit tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "reconciler-test"
          workspaces: |
            reconciler
      - name: Unit tests
        run: cargo test

  functional_test:
    name: Run functional testing
    runs-on: ubuntu-20.04
    strategy:
      # fail-fast means to cancel all jobs if one fails
      fail-fast: false
      matrix:
        # Go here for a list of versions:
        # https://github.com/kubernetes-sigs/kind/releases
        node_image:
          - 'kindest/node:v1.25.3'
    steps:
      - uses: actions/checkout@v2
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.5.0
        with:
          node_image: ${{ matrix.node_image }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "reconciler-functional-test"
          workspaces: |
            reconciler
      - name: Run functional / integration tests
        run: |
          set -xe
          # Install the CoreDB operator
          cargo install coredb-cli
          coredb-cli install
          kubectl get crds

          # Start the reconciler in the background
          cargo run &

          # Run the tests
          cargo test -- --ignored --nocapture
      - name: Debugging information
        if: always()
        run: |
          set +e
          set -x
          echo "=========="
          kubectl get pods --all-namespaces
          echo "=========="
          kubectl get -o yaml sts
          echo "=========="
          kubectl get -o yaml svc
          echo "=========="
          kubectl get -o yaml pods
          echo "=========="
          kubectl get -o yaml coredb
          echo "=========="
